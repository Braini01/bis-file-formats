//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/developer/Desktop/DZConfigTools/DZConfigTools.Core/Generated\ParamFileParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BIS.RAP.Generated;
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParamFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SINGLE_LINE_COMMENT=1, EMPTY_DELIMITED_COMMENT=2, DELIMITED_COMMENT=3, 
		PREPROCESSOR_DIRECTIVE=4, WHITESPACES=5, Class=6, Delete=7, Add_Assign=8, 
		Assign=9, LSBracket=10, RSBracket=11, LCBracket=12, RCBracket=13, Semicolon=14, 
		Colon=15, Comma=16, DoubleQuote=17, Identifier=18, LiteralString=19, LiteralInteger=20, 
		LiteralFloat=21;
	public const int
		RULE_computationalStart = 0, RULE_statement = 1, RULE_arrayAppension = 2, 
		RULE_deleteStatement = 3, RULE_externalClassDeclaration = 4, RULE_classDeclaration = 5, 
		RULE_arrayDeclaration = 6, RULE_tokenDeclaration = 7, RULE_literalArray = 8, 
		RULE_literalString = 9, RULE_literalInteger = 10, RULE_literalFloat = 11, 
		RULE_literalOrArray = 12, RULE_literal = 13, RULE_arrayName = 14, RULE_identifier = 15;
	public static readonly string[] ruleNames = {
		"computationalStart", "statement", "arrayAppension", "deleteStatement", 
		"externalClassDeclaration", "classDeclaration", "arrayDeclaration", "tokenDeclaration", 
		"literalArray", "literalString", "literalInteger", "literalFloat", "literalOrArray", 
		"literal", "arrayName", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'class'", "'delete'", "'+='", "'='", 
		"'['", "']'", "'{'", "'}'", "';'", "':'", "','", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SINGLE_LINE_COMMENT", "EMPTY_DELIMITED_COMMENT", "DELIMITED_COMMENT", 
		"PREPROCESSOR_DIRECTIVE", "WHITESPACES", "Class", "Delete", "Add_Assign", 
		"Assign", "LSBracket", "RSBracket", "LCBracket", "RCBracket", "Semicolon", 
		"Colon", "Comma", "DoubleQuote", "Identifier", "LiteralString", "LiteralInteger", 
		"LiteralFloat"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParamFileParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParamFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParamFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParamFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComputationalStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ComputationalStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computationalStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitComputationalStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputationalStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputationalStartContext computationalStart() {
		ComputationalStartContext _localctx = new ComputationalStartContext(Context, State);
		EnterRule(_localctx, 0, RULE_computationalStart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Delete) | (1L << Identifier))) != 0)) {
				{
				{
				State = 32;
				statement();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ParamFileParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAppensionContext arrayAppension() {
			return GetRuleContext<ArrayAppensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenDeclarationContext tokenDeclaration() {
			return GetRuleContext<TokenDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalClassDeclarationContext externalClassDeclaration() {
			return GetRuleContext<ExternalClassDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				deleteStatement();
				State = 39;
				Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				arrayAppension();
				State = 42;
				Match(Semicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				arrayDeclaration();
				State = 45;
				Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 47;
				tokenDeclaration();
				State = 48;
				Match(Semicolon);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 50;
				classDeclaration();
				State = 51;
				Match(Semicolon);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 53;
				externalClassDeclaration();
				State = 54;
				Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAppensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayNameContext arrayName() {
			return GetRuleContext<ArrayNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add_Assign() { return GetToken(ParamFileParser.Add_Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public ArrayAppensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAppension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterArrayAppension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitArrayAppension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAppension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAppensionContext arrayAppension() {
		ArrayAppensionContext _localctx = new ArrayAppensionContext(Context, State);
		EnterRule(_localctx, 4, RULE_arrayAppension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			arrayName();
			State = 59;
			Match(Add_Assign);
			State = 60;
			literalArray();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Delete() { return GetToken(ParamFileParser.Delete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_deleteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(Delete);
			State = 63;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalClassDeclarationContext : ParserRuleContext {
		public IdentifierContext classname;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(ParamFileParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExternalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalClassDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterExternalClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitExternalClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalClassDeclarationContext externalClassDeclaration() {
		ExternalClassDeclarationContext _localctx = new ExternalClassDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_externalClassDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(Class);
			State = 66;
			_localctx.classname = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public IdentifierContext classname;
		public IdentifierContext superclass;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(ParamFileParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCBracket() { return GetToken(ParamFileParser.LCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCBracket() { return GetToken(ParamFileParser.RCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ParamFileParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(Class);
			State = 69;
			_localctx.classname = identifier();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 70;
				Match(Colon);
				State = 71;
				_localctx.superclass = identifier();
				}
			}

			State = 74;
			Match(LCBracket);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Class) | (1L << Delete) | (1L << Identifier))) != 0)) {
				{
				{
				State = 75;
				statement();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(RCBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public LiteralArrayContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ArrayNameContext arrayName() {
			return GetRuleContext<ArrayNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ParamFileParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_arrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			arrayName();
			State = 84;
			Match(Assign);
			State = 85;
			_localctx.value = literalArray();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenDeclarationContext : ParserRuleContext {
		public IdentifierContext tokenName;
		public LiteralContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ParamFileParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TokenDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokenDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterTokenDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitTokenDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokenDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenDeclarationContext tokenDeclaration() {
		TokenDeclarationContext _localctx = new TokenDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_tokenDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_localctx.tokenName = identifier();
			State = 88;
			Match(Assign);
			State = 89;
			_localctx.value = literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCBracket() { return GetToken(ParamFileParser.LCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCBracket() { return GetToken(ParamFileParser.RCBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOrArrayContext[] literalOrArray() {
			return GetRuleContexts<LiteralOrArrayContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOrArrayContext literalOrArray(int i) {
			return GetRuleContext<LiteralOrArrayContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ParamFileParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ParamFileParser.Comma, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(Context, State);
		EnterRule(_localctx, 16, RULE_literalArray);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(LCBracket);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LCBracket) | (1L << LiteralString) | (1L << LiteralInteger) | (1L << LiteralFloat))) != 0)) {
				{
				State = 92;
				literalOrArray();
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 93;
						Match(Comma);
						State = 94;
						literalOrArray();
						}
						} 
					}
					State = 99;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 100;
					Match(Comma);
					}
				}

				}
			}

			State = 105;
			Match(RCBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralString() { return GetToken(ParamFileParser.LiteralString, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 18, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(LiteralString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralInteger() { return GetToken(ParamFileParser.LiteralInteger, 0); }
		public LiteralIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntegerContext literalInteger() {
		LiteralIntegerContext _localctx = new LiteralIntegerContext(Context, State);
		EnterRule(_localctx, 20, RULE_literalInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(LiteralInteger);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LiteralFloat() { return GetToken(ParamFileParser.LiteralFloat, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 22, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(LiteralFloat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralOrArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralOrArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalOrArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteralOrArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteralOrArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralOrArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralOrArrayContext literalOrArray() {
		LiteralOrArrayContext _localctx = new LiteralOrArrayContext(Context, State);
		EnterRule(_localctx, 24, RULE_literalOrArray);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LiteralString:
			case LiteralInteger:
			case LiteralFloat:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				literal();
				}
				break;
			case LCBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				literalArray();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntegerContext literalInteger() {
			return GetRuleContext<LiteralIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_literal);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LiteralString:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				literalString();
				}
				break;
			case LiteralInteger:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				literalInteger();
				}
				break;
			case LiteralFloat:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				literalFloat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBracket() { return GetToken(ParamFileParser.LSBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBracket() { return GetToken(ParamFileParser.RSBracket, 0); }
		public ArrayNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterArrayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitArrayName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayNameContext arrayName() {
		ArrayNameContext _localctx = new ArrayNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_arrayName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			identifier();
			State = 123;
			Match(LSBracket);
			State = 124;
			Match(RSBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ParamFileParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParamFileParserListener typedListener = listener as IParamFileParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParamFileParserVisitor<TResult> typedVisitor = visitor as IParamFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,21,129,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,5,0,34,8,0,10,0,12,0,37,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,57,8,1,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,73,8,5,1,5,1,5,5,5,77,8,5,
		10,5,12,5,80,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,5,8,96,8,8,10,8,12,8,99,9,8,1,8,3,8,102,8,8,3,8,104,8,8,1,8,1,8,1,9,
		1,9,1,10,1,10,1,11,1,11,1,12,1,12,3,12,116,8,12,1,13,1,13,1,13,3,13,121,
		8,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,0,0,16,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,0,0,126,0,35,1,0,0,0,2,56,1,0,0,0,4,58,1,0,0,0,6,62,
		1,0,0,0,8,65,1,0,0,0,10,68,1,0,0,0,12,83,1,0,0,0,14,87,1,0,0,0,16,91,1,
		0,0,0,18,107,1,0,0,0,20,109,1,0,0,0,22,111,1,0,0,0,24,115,1,0,0,0,26,120,
		1,0,0,0,28,122,1,0,0,0,30,126,1,0,0,0,32,34,3,2,1,0,33,32,1,0,0,0,34,37,
		1,0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,1,1,0,0,0,37,35,1,0,0,0,38,39,3,
		6,3,0,39,40,5,14,0,0,40,57,1,0,0,0,41,42,3,4,2,0,42,43,5,14,0,0,43,57,
		1,0,0,0,44,45,3,12,6,0,45,46,5,14,0,0,46,57,1,0,0,0,47,48,3,14,7,0,48,
		49,5,14,0,0,49,57,1,0,0,0,50,51,3,10,5,0,51,52,5,14,0,0,52,57,1,0,0,0,
		53,54,3,8,4,0,54,55,5,14,0,0,55,57,1,0,0,0,56,38,1,0,0,0,56,41,1,0,0,0,
		56,44,1,0,0,0,56,47,1,0,0,0,56,50,1,0,0,0,56,53,1,0,0,0,57,3,1,0,0,0,58,
		59,3,28,14,0,59,60,5,8,0,0,60,61,3,16,8,0,61,5,1,0,0,0,62,63,5,7,0,0,63,
		64,3,30,15,0,64,7,1,0,0,0,65,66,5,6,0,0,66,67,3,30,15,0,67,9,1,0,0,0,68,
		69,5,6,0,0,69,72,3,30,15,0,70,71,5,15,0,0,71,73,3,30,15,0,72,70,1,0,0,
		0,72,73,1,0,0,0,73,74,1,0,0,0,74,78,5,12,0,0,75,77,3,2,1,0,76,75,1,0,0,
		0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,
		0,81,82,5,13,0,0,82,11,1,0,0,0,83,84,3,28,14,0,84,85,5,9,0,0,85,86,3,16,
		8,0,86,13,1,0,0,0,87,88,3,30,15,0,88,89,5,9,0,0,89,90,3,26,13,0,90,15,
		1,0,0,0,91,103,5,12,0,0,92,97,3,24,12,0,93,94,5,16,0,0,94,96,3,24,12,0,
		95,93,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,101,1,0,0,0,
		99,97,1,0,0,0,100,102,5,16,0,0,101,100,1,0,0,0,101,102,1,0,0,0,102,104,
		1,0,0,0,103,92,1,0,0,0,103,104,1,0,0,0,104,105,1,0,0,0,105,106,5,13,0,
		0,106,17,1,0,0,0,107,108,5,19,0,0,108,19,1,0,0,0,109,110,5,20,0,0,110,
		21,1,0,0,0,111,112,5,21,0,0,112,23,1,0,0,0,113,116,3,26,13,0,114,116,3,
		16,8,0,115,113,1,0,0,0,115,114,1,0,0,0,116,25,1,0,0,0,117,121,3,18,9,0,
		118,121,3,20,10,0,119,121,3,22,11,0,120,117,1,0,0,0,120,118,1,0,0,0,120,
		119,1,0,0,0,121,27,1,0,0,0,122,123,3,30,15,0,123,124,5,10,0,0,124,125,
		5,11,0,0,125,29,1,0,0,0,126,127,5,18,0,0,127,31,1,0,0,0,9,35,56,72,78,
		97,101,103,115,120
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
